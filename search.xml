<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java链表实现</title>
    <url>/2024/11/03/Java%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Java-链表实现"><a href="#Java-链表实现" class="headerlink" title="Java 链表实现"></a>Java 链表实现</h1><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Init</span><span class="params">(Node head, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">            tmp.next = <span class="literal">null</span>;</span><br><span class="line">            newHead.next = tmp;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(newHead.data);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Insert</span><span class="params">(Node head, <span class="type">int</span> index, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        tmp.next = newHead.next;</span><br><span class="line">        newHead.next = tmp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Delete</span><span class="params">(Node head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = newHead.next.data;</span><br><span class="line">        newHead.next = newHead.next.next;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Find</span><span class="params">(Node head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法查找&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Alter</span><span class="params">(Node head, <span class="type">int</span> index, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法更改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newHead.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">GetLength</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要实现了对链表的初始化以及增删查改等，未实现排序，逆序等功能</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java链表拓展--排序，翻转</title>
    <url>/2024/11/03/Java%E9%93%BE%E8%A1%A8%E6%8B%93%E5%B1%95-%E6%8E%92%E5%BA%8F%EF%BC%8C%E7%BF%BB%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="Java链表排序"><a href="#Java链表排序" class="headerlink" title="Java链表排序"></a>Java链表排序</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SortList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ArrayList&lt;Integer&gt; SortArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        SortArray.add(newHead.data);</span><br><span class="line">        newHead = newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">    SortArray.sort(Comparator.naturalOrder());</span><br><span class="line">    newHead = head;</span><br><span class="line">    <span class="keyword">while</span> (newHead != <span class="literal">null</span>)&#123;</span><br><span class="line">        newHead.data = SortArray.get(i);</span><br><span class="line">        newHead = newHead.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="排序采用了先转为数组，对数组进行排序再给链表重新赋值的方法"><a href="#排序采用了先转为数组，对数组进行排序再给链表重新赋值的方法" class="headerlink" title="排序采用了先转为数组，对数组进行排序再给链表重新赋值的方法"></a>排序采用了先转为数组，对数组进行排序再给链表重新赋值的方法</h4><h1 id="Java链表反转"><a href="#Java链表反转" class="headerlink" title="Java链表反转"></a>Java链表反转</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Reverse</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return pre;</span></span><br><span class="line">        head.next = pre;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="反转采用了三个节点依次翻转"><a href="#反转采用了三个节点依次翻转" class="headerlink" title="反转采用了三个节点依次翻转"></a>反转采用了三个节点依次翻转</h4><h1 id="链表类完整代码"><a href="#链表类完整代码" class="headerlink" title="链表类完整代码"></a>链表类完整代码</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Init</span><span class="params">(Node head, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">            tmp.next = <span class="literal">null</span>;</span><br><span class="line">            newHead.next = tmp;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(newHead.data);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Insert</span><span class="params">(Node head, <span class="type">int</span> index, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        tmp.next = newHead.next;</span><br><span class="line">        newHead.next = tmp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Delete</span><span class="params">(Node head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = newHead.next.data;</span><br><span class="line">        newHead.next = newHead.next.next;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Find</span><span class="params">(Node head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法查找&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Alter</span><span class="params">(Node head, <span class="type">int</span> index, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; index &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引超过长度，无法更改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newHead.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SortList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; SortArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            SortArray.add(newHead.data);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        SortArray.sort(Comparator.naturalOrder());</span><br><span class="line">        newHead = head;</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>)&#123;</span><br><span class="line">            newHead.data = SortArray.get(i);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Reverse</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return pre;</span></span><br><span class="line">        head.next = pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">GetLength</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树实现-初始化，层序遍历（广搜）</title>
    <url>/2024/11/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AE%9E%E7%8E%B0-%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E5%B9%BF%E6%90%9C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Java二叉树实现"><a href="#Java二叉树实现" class="headerlink" title="Java二叉树实现"></a>Java二叉树实现</h1><h2 id="初始化（满二叉树）"><a href="#初始化（满二叉树）" class="headerlink" title="初始化（满二叉树）"></a>初始化（满二叉树）</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FBTreeInit</span><span class="params">(TreeNode root, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">    root.Val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    root.Left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    root.Right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    FBTreeInit(root.Left, height - <span class="number">1</span>);</span><br><span class="line">    FBTreeInit(root.Right, height - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    ArrayList&lt;TreeNode&gt; loTArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    loTArray.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!loTArray.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> loTArray.size();</span><br><span class="line">        TreeNode node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            node = loTArray.removeFirst();</span><br><span class="line">            System.out.println(node.Val);</span><br><span class="line">            <span class="keyword">if</span> (node.Left != <span class="literal">null</span>) &#123;</span><br><span class="line">                loTArray.add(node.Left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.Right != <span class="literal">null</span>) &#123;</span><br><span class="line">                loTArray.add(node.Right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="二叉树类代码"><a href="#二叉树类代码" class="headerlink" title="二叉树类代码"></a>二叉树类代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> TwoTree;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> Val;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">TreeNode</span> <span class="variable">Left</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">TreeNode</span> <span class="variable">Right</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// height从根节点为0开始</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FBTreeInit</span><span class="params">(TreeNode root, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        root.Val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root.Left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        root.Right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        FBTreeInit(root.Left, height - <span class="number">1</span>);</span><br><span class="line">        FBTreeInit(root.Right, height - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;TreeNode&gt; loTArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        loTArray.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!loTArray.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> loTArray.size();</span><br><span class="line">            TreeNode node;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                node = loTArray.removeFirst();</span><br><span class="line">                System.out.println(node.Val);</span><br><span class="line">                <span class="keyword">if</span> (node.Left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    loTArray.add(node.Left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.Right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    loTArray.add(node.Right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>说明介绍</title>
    <url>/2024/11/03/%E8%AF%B4%E6%98%8E%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>先说一下为啥这几篇文章全是Java的，只是因为java和数据结构快要结课考试了，</p>
<p>后续会更新一些go以及其他方面的内容</p>
<h2 id="个人说明"><a href="#个人说明" class="headerlink" title="个人说明"></a>个人说明</h2><p>姓名：卢普希</p>
<p>爱好：略：）</p>
<p>太原理工大学在读大二软件工程学生，水平比较菜，写写博客记录一下自己写的或者做的一些小东西</p>
]]></content>
      <categories>
        <category>生活向</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的ai对话网页详解-第一天</title>
    <url>/2024/11/04/Go%E7%9A%84ai%E5%AF%B9%E8%AF%9D%E7%BD%91%E9%A1%B5%E8%AF%A6%E8%A7%A3-%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h1 id="Go-ai对话网页"><a href="#Go-ai对话网页" class="headerlink" title="Go ai对话网页"></a>Go ai对话网页</h1><p>本项目初期采用Gin框架，现在开源的项目中已采用了我自己写的Gwe框架，仿照了Gin的方法名称，可以一键切换。</p>
<p>项目目录采用GitHub开源的<a class="link"   href="https://github.com/golang-standards/project-layout/blob/master/README_zh.md" >https://github.com/golang-standards/project-layout/blob/master/README_zh.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png"
                      alt="项目目录"
                ></p>
<h4 id="ai问答网页-其实就是一个比较简单的后端服务，前端传过来的消息经过后端处理成模型需要的输入格式再传给模型，接收模型返回的对话，前端显示即可。"><a href="#ai问答网页-其实就是一个比较简单的后端服务，前端传过来的消息经过后端处理成模型需要的输入格式再传给模型，接收模型返回的对话，前端显示即可。" class="headerlink" title="ai问答网页 其实就是一个比较简单的后端服务，前端传过来的消息经过后端处理成模型需要的输入格式再传给模型，接收模型返回的对话，前端显示即可。"></a>ai问答网页 其实就是一个比较简单的后端服务，前端传过来的消息经过后端处理成模型需要的输入格式再传给模型，接收模型返回的对话，前端显示即可。</h4><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>采用ollama部署大模型模型，请提前下载ollama以及工具链langchaingo</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">go install github.com/tmc/langchaingo/llms@latest</span><br></pre></td></tr></table></figure></div>

<p>前置操作需要安装gin框架，后续不用，也可使用原生的net&#x2F;http进行操作</p>
<p>最后的main.go文件中其实只有短短几行</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;ai_web/internal/middleware&quot;</span></span><br><span class="line">    <span class="comment">//&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    gin <span class="string">&quot;ai_web/Gwe/Gwe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.New()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//r.Use(middleware.Cors())</span></span><br><span class="line">    r.Use(middleware.Router(r))</span><br><span class="line">    err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>这里使用gin初始化了一个不带log和recovery的引擎，之后加入两个中间件，跨域和路由，最后开启服务即可，我这里把跨越中间件注释掉主要是因为我是在本地测试的，好像是不需要这个，不是很懂。</p>
<p>internal目录结构如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/internal.png"
                      alt="internal"
                ></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    gin <span class="string">&quot;ai_web/Gwe/Gwe&quot;</span></span><br><span class="line">    <span class="string">&quot;ai_web/internal/controller&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Router</span><span class="params">(r *gin.Engine)</span></span> gin.HandlerFunc &#123;</span><br><span class="line"></span><br><span class="line">    chat := controller.Chat&#123;&#125;</span><br><span class="line">    mainGroup := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">       mainGroup.POST(<span class="string">&quot;/chat&quot;</span>, chat.Dochat)</span><br><span class="line">       <span class="comment">//mainGroup.POST(&quot;/login&quot;, Nuser.Login)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>路由的逻辑很简单，就是在&#x2F;chat路径上起个路由就好了，这里遵循Restful API的风格，使用POST请求，具体Dochat的细节等第二天的文章吧。</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的ai对话网页详解-第二天</title>
    <url>/2024/11/05/Go%E7%9A%84ai%E5%AF%B9%E8%AF%9D%E7%BD%91%E9%A1%B5%E8%AF%A6%E8%A7%A3-%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<h1 id="第二天-–-Dochat回调函数详解"><a href="#第二天-–-Dochat回调函数详解" class="headerlink" title="第二天 – Dochat回调函数详解"></a>第二天 – Dochat回调函数详解</h1><p>先把函数贴上来</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Chat)</span></span> Dochat(c *gin.Context) &#123;</span><br><span class="line">    <span class="keyword">var</span> body model.Chat</span><br><span class="line">    err := c.ShouldBindJSON(&amp;body)</span><br><span class="line">    <span class="comment">//fmt.Println(body.Text)</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">          <span class="string">&quot;msg&quot;</span>: err.Error(),</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//open, err := sql.Open(&quot;sqlite3&quot;, &quot;C:\\Users\\lkpalu\\GolandProjects\\ai_web\\internal\\SQL\\message.db&quot;)</span></span><br><span class="line">    <span class="comment">//if err != nil &#123;</span></span><br><span class="line">    <span class="comment">// log.Println(&quot;打开数据库失败&quot;)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//defer open.Close()</span></span><br><span class="line">    <span class="comment">//_, err = open.Exec(&quot;INSERT INTO messages(name,time,text) VALUES (?,?,?)&quot;, user.U.Name, time.Now(), body.Text)</span></span><br><span class="line">    prompt := util.CreatePrompt()</span><br><span class="line"></span><br><span class="line">    data := <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line">       <span class="string">&quot;text&quot;</span>: body.Text,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    messages, err := prompt.FormatMessages(data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">          <span class="string">&quot;msg&quot;</span>: err.Error(),</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(messages)</span></span><br><span class="line">    contents := []llms.MessageContent&#123;</span><br><span class="line">       llms.TextParts(messages[<span class="number">0</span>].GetType(), messages[<span class="number">0</span>].GetContent()),</span><br><span class="line">       llms.TextParts(messages[<span class="number">1</span>].GetType(), messages[<span class="number">1</span>].GetContent()),</span><br><span class="line">    &#125;</span><br><span class="line">    llm := util.CteateModel(c, <span class="string">&quot;qwen&quot;</span>)</span><br><span class="line">    resp, err := llm.GenerateContent(context.Background(), contents)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">          <span class="string">&quot;msg&quot;</span>: err.Error(),</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">       <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">       <span class="string">&quot;data&quot;</span>: resp.Choices[<span class="number">0</span>].Content,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//fmt.Println(resp.Choices[0].Content)</span></span><br><span class="line">    <span class="comment">//_, err = open.Exec(&quot;INSERT INTO messages(name,time,text) VALUES (?,?,?)&quot;, &quot;AI&quot;, time.Now(), resp.Choices[0].Content)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="函数逻辑"><a href="#函数逻辑" class="headerlink" title="函数逻辑"></a>函数逻辑</h4><p>这个函数中就是对于前端的json接收以及处理的一个过程，一开始的ShouldBindJSON方法让前端</p>
<p><code>&#123;</code></p>
<p>​	<code>“text” : messages</code></p>
<p><code>&#125;</code></p>
<p>绑定到结构体中，结构体格式如下</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Chat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Text <span class="type">string</span> <span class="string">`json:&quot;text&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>json:&quot;text&quot;</code>是go中在json字符串中的键名称，json中会把<strong>Text</strong>这个键变为<strong>text</strong></p>
<p>绑定之后初始化提词器模板，将结构体中的消息放入模板中格式化，变为格式化语句，再将格式化语句按照大模型的输入要求传入模型中</p>
<p>最后返回大模型的回答内容，即<strong>resp.Choices[0].Content</strong></p>
<p>这样一个Dochat就完成了。</p>
<h4 id="模板初始化"><a href="#模板初始化" class="headerlink" title="模板初始化"></a>模板初始化</h4><p>**util.CreatePrompt()**这个函数为初始化模板的函数，代码如下</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreatePrompt</span><span class="params">()</span></span> prompts.ChatPromptTemplate &#123;</span><br><span class="line">    <span class="keyword">return</span> prompts.NewChatPromptTemplate([]prompts.MessageFormatter&#123;</span><br><span class="line">       prompts.NewSystemMessagePromptTemplate(<span class="string">&quot;&quot;</span>, <span class="literal">nil</span>),</span><br><span class="line">       prompts.NewHumanMessagePromptTemplate(<span class="string">&quot;&#123;&#123; .text &#125;&#125;&quot;</span>, []<span class="type">string</span>&#123;</span><br><span class="line">          <span class="string">&quot;text&quot;</span>,</span><br><span class="line">       &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里初始化的时候不需要给系统提示词，因为我们并不需要给模型一个具体场景下的角色，</p>
<p>人类的提示词即我们在前端输入的语句，这里使用go语言的模板初始化，代表这里要填的内容为后续<strong>text</strong>的内容</p>
<h4 id="大模型初始化"><a href="#大模型初始化" class="headerlink" title="大模型初始化"></a>大模型初始化</h4><p>**util.CteateModel(c, “qwen”)**这个函数为初始化大模型的函数，代码如下</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CteateModel</span><span class="params">(c *gin.Context, ModelName <span class="type">string</span>)</span></span> *ollama.LLM &#123;</span><br><span class="line">    llm, err := ollama.New(ollama.WithModel(ModelName))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       c.JSON(http.StatusInternalServerError, gin.H&#123;</span><br><span class="line">          <span class="string">&quot;msg&quot;</span>: err.Error(),</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> llm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>就是调用接口**ollama.New()**创建一个大模型的指针即可</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Dochat中就是接收前端消息，初始化消息模型，初始化大模型，把前端消息格式化后传入给大模型再返回大模型的消息即可</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
</search>
